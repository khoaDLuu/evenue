
type User @aws_api_key @aws_cognito_user_pools {
  name: String!
  reviews(filter: ModelReviewFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelReviewConnection
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type Venue @aws_api_key @aws_cognito_user_pools {
  id: ID!
  name: String!
  headline: String!
  description: String
  photos: [Photo!]!
  address: String!
  city: String!
  pricing: Pricing!
  type: Category!
  eventTypes: [String!]
  published: Boolean!
  extras: [Extra]
  capacity: Capacity
  operatingHours: [OperatingHour]
  reviews(filter: ModelReviewFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelReviewConnection
  owner: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Category @aws_api_key @aws_cognito_user_pools {
  name: String!
}

type Pricing @aws_api_key @aws_cognito_user_pools {
  currency: SupportedCurrency!
  perHour: [HourlyPricing]
  perDay: Float
}

type HourlyPricing @aws_api_key @aws_cognito_user_pools {
  startHour: AWSTime!
  endHour: AWSTime!
  price: Float!
}

type Extra @aws_api_key @aws_cognito_user_pools {
  name: String!
  type: String
  price: Float!
}

type Capacity @aws_api_key @aws_cognito_user_pools {
  unit: UnitOfArea
  floorSize: Float
  recommendedGuestCount: Int
}

enum UnitOfArea {
  sqft
  sqm
}

type OperatingHour @aws_api_key @aws_cognito_user_pools {
  daysOfWeek: [DayOfWeek]
  startHour: AWSTime
  endHour: AWSTime
}

enum DayOfWeek {
  Mon
  Tue
  Wed
  Thu
  Fri
  Sat
  Sun
}

enum SupportedCurrency {
  USD
  VND
  EUR
}

type Review @aws_api_key @aws_cognito_user_pools {
  venue: Venue
  user: User
  rating: Int!
  review: String
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  userReviewsId: ID
  venueReviewsId: ID
  owner: String
}

type Photo @aws_api_key @aws_cognito_user_pools {
  name: String
  fullsize: S3Object!
  thumbnails: [S3Object]
}

type S3Object @aws_api_key @aws_cognito_user_pools {
  region: String!
  bucket: String!
  key: String!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection @aws_api_key @aws_cognito_user_pools {
  items: [User!]!
  nextToken: String
}

input ModelUserFilterInput {
  name: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

type Query {
  getUser(id: ID!): User @aws_api_key @aws_cognito_user_pools
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection @aws_api_key @aws_cognito_user_pools
  getVenue(id: ID!): Venue @aws_api_key @aws_cognito_user_pools
  listVenues(filter: ModelVenueFilterInput, limit: Int, nextToken: String): ModelVenueConnection @aws_api_key @aws_cognito_user_pools
  getReview(id: ID!): Review @aws_api_key @aws_cognito_user_pools
  listReviews(filter: ModelReviewFilterInput, limit: Int, nextToken: String): ModelReviewConnection @aws_api_key @aws_cognito_user_pools
}

input ModelUserConditionInput {
  name: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

input CreateUserInput {
  name: String!
  id: ID
}

input UpdateUserInput {
  name: String
}

input DeleteUserInput {
  id: ID!
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createVenue(input: CreateVenueInput!, condition: ModelVenueConditionInput): Venue
  updateVenue(input: UpdateVenueInput!, condition: ModelVenueConditionInput): Venue
  deleteVenue(input: DeleteVenueInput!, condition: ModelVenueConditionInput): Venue
  createReview(input: CreateReviewInput!, condition: ModelReviewConditionInput): Review
  updateReview(input: UpdateReviewInput!, condition: ModelReviewConditionInput): Review
  deleteReview(input: DeleteReviewInput!, condition: ModelReviewConditionInput): Review
}

type Subscription {
  onCreateUser(owner: String): User @aws_subscribe(mutations: ["createUser"]) @aws_api_key @aws_cognito_user_pools
  onUpdateUser(owner: String): User @aws_subscribe(mutations: ["updateUser"]) @aws_api_key @aws_cognito_user_pools
  onDeleteUser(owner: String): User @aws_subscribe(mutations: ["deleteUser"]) @aws_api_key @aws_cognito_user_pools
  onCreateVenue(owner: String): Venue @aws_subscribe(mutations: ["createVenue"]) @aws_api_key @aws_cognito_user_pools
  onUpdateVenue(owner: String): Venue @aws_subscribe(mutations: ["updateVenue"]) @aws_api_key @aws_cognito_user_pools
  onDeleteVenue(owner: String): Venue @aws_subscribe(mutations: ["deleteVenue"]) @aws_api_key @aws_cognito_user_pools
  onCreateReview(owner: String): Review @aws_subscribe(mutations: ["createReview"]) @aws_api_key @aws_cognito_user_pools
  onUpdateReview(owner: String): Review @aws_subscribe(mutations: ["updateReview"]) @aws_api_key @aws_cognito_user_pools
  onDeleteReview(owner: String): Review @aws_subscribe(mutations: ["deleteReview"]) @aws_api_key @aws_cognito_user_pools
}

input PhotoInput {
  name: String
  fullsize: S3ObjectInput!
  thumbnails: [S3ObjectInput]
}

input S3ObjectInput {
  region: String!
  bucket: String!
  key: String!
}

input PricingInput {
  currency: SupportedCurrency!
  perHour: [HourlyPricingInput]
  perDay: Float
}

input HourlyPricingInput {
  startHour: AWSTime!
  endHour: AWSTime!
  price: Float!
}

input CategoryInput {
  name: String!
}

input ExtraInput {
  name: String!
  type: String
  price: Float!
}

input CapacityInput {
  unit: UnitOfArea
  floorSize: Float
  recommendedGuestCount: Int
}

input OperatingHourInput {
  daysOfWeek: [DayOfWeek]
  startHour: AWSTime
  endHour: AWSTime
}

type ModelVenueConnection @aws_api_key @aws_cognito_user_pools {
  items: [Venue!]!
  nextToken: String
}

input ModelVenueFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  headline: ModelStringInput
  description: ModelStringInput
  address: ModelStringInput
  city: ModelStringInput
  eventTypes: ModelStringInput
  published: ModelBooleanInput
  owner: ModelStringInput
  and: [ModelVenueFilterInput]
  or: [ModelVenueFilterInput]
  not: ModelVenueFilterInput
}

input ModelVenueConditionInput {
  name: ModelStringInput
  headline: ModelStringInput
  description: ModelStringInput
  address: ModelStringInput
  city: ModelStringInput
  eventTypes: ModelStringInput
  published: ModelBooleanInput
  owner: ModelStringInput
  and: [ModelVenueConditionInput]
  or: [ModelVenueConditionInput]
  not: ModelVenueConditionInput
}

input CreateVenueInput {
  id: ID
  name: String!
  headline: String!
  description: String
  photos: [PhotoInput!]!
  address: String!
  city: String!
  pricing: PricingInput!
  type: CategoryInput!
  eventTypes: [String!]
  published: Boolean!
  extras: [ExtraInput]
  capacity: CapacityInput
  operatingHours: [OperatingHourInput]
  owner: String
}

input UpdateVenueInput {
  id: ID!
  name: String
  headline: String
  description: String
  photos: [PhotoInput!]
  address: String
  city: String
  pricing: PricingInput
  type: CategoryInput
  eventTypes: [String!]
  published: Boolean
  extras: [ExtraInput]
  capacity: CapacityInput
  operatingHours: [OperatingHourInput]
  owner: String
}

input DeleteVenueInput {
  id: ID!
}

type ModelReviewConnection @aws_api_key @aws_cognito_user_pools {
  items: [Review!]!
  nextToken: String
}

input ModelReviewFilterInput {
  rating: ModelIntInput
  review: ModelStringInput
  and: [ModelReviewFilterInput]
  or: [ModelReviewFilterInput]
  not: ModelReviewFilterInput
  userReviewsId: ModelIDInput
  venueReviewsId: ModelIDInput
}

input ModelReviewConditionInput {
  rating: ModelIntInput
  review: ModelStringInput
  and: [ModelReviewConditionInput]
  or: [ModelReviewConditionInput]
  not: ModelReviewConditionInput
  userReviewsId: ModelIDInput
  venueReviewsId: ModelIDInput
}

input CreateReviewInput {
  rating: Int!
  review: String
  id: ID
  userReviewsId: ID
  venueReviewsId: ID
}

input UpdateReviewInput {
  rating: Int
  review: String
  userReviewsId: ID
  venueReviewsId: ID
}

input DeleteReviewInput {
  id: ID!
}

